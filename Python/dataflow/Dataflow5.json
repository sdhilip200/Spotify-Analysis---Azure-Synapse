{
	"name": "Dataflow5",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Parquet2",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "Excel5",
						"type": "DatasetReference"
					},
					"name": "AgencyDim"
				},
				{
					"dataset": {
						"referenceName": "Excel6",
						"type": "DatasetReference"
					},
					"name": "LocationDim"
				},
				{
					"dataset": {
						"referenceName": "Excel8",
						"type": "DatasetReference"
					},
					"name": "RateDim"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable5",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "agencylookup"
				},
				{
					"name": "Locationlookup"
				},
				{
					"name": "select1"
				},
				{
					"name": "ratelookup"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          JNCOUNTER as string,",
				"          AGENCYNAME as string,",
				"          AGENCYNUMBER as string,",
				"          JOBREFERENCE as string,",
				"          JOBTYPE as string,",
				"          POSITION as string,",
				"          LOCATION as string,",
				"          STARTDATE as string,",
				"          DURATION as string,",
				"          RATE as string,",
				"          CONTACT as string,",
				"          DATEINPUT as string,",
				"          OTHER as string,",
				"          ORIGINALDATE as string,",
				"          INDUSTRY as string,",
				"          Category as string,",
				"          ARCHIVEDDATE as string,",
				"          DELETEDDATE as string,",
				"          {__index_level_0__} as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> source1",
				"source(output(",
				"          AGENCYNAME as string,",
				"          Name as string,",
				"          AgencyID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> AgencyDim",
				"source(output(",
				"          LOCATION as string,",
				"          {Location Name} as string,",
				"          Region as string,",
				"          Country as string,",
				"          LocationID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> LocationDim",
				"source(output(",
				"          RATE as string,",
				"          {Min Salary (Range)} as string,",
				"          {Max Salary (Range)} as string,",
				"          RateID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RateDim",
				"source1, AgencyDim lookup(source1@AGENCYNAME == AgencyDim@AGENCYNAME,",
				"     multiple: true,",
				"     broadcast: 'auto')~> agencylookup",
				"agencylookup, LocationDim lookup(source1@LOCATION == LocationDim@LOCATION,",
				"     multiple: true,",
				"     broadcast: 'auto')~> Locationlookup",
				"Locationlookup select(mapColumn(",
				"          JNCOUNTER,",
				"          AGENCYNUMBER,",
				"          JOBREFERENCE,",
				"          JOBTYPE,",
				"          POSITION,",
				"          STARTDATE,",
				"          DURATION,",
				"          RATE,",
				"          CONTACT,",
				"          DATEINPUT,",
				"          OTHER,",
				"          ORIGINALDATE,",
				"          INDUSTRY,",
				"          Category,",
				"          ARCHIVEDDATE,",
				"          DELETEDDATE,",
				"          AGENCYNAME = AgencyDim@AGENCYNAME,",
				"          AgencyID,",
				"          LOCATION = LocationDim@LOCATION,",
				"          LocationID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, RateDim lookup(select1@RATE == RateDim@RATE,",
				"     multiple: true,",
				"     broadcast: 'auto')~> ratelookup",
				"ratelookup select(mapColumn(",
				"          JNCOUNTER,",
				"          AGENCYNUMBER,",
				"          JOBREFERENCE,",
				"          JOBTYPE,",
				"          POSITIONS = POSITION,",
				"          STARTDATE,",
				"          DURATION,",
				"          CONTACT,",
				"          DATEINPUT,",
				"          ORIGINALDATE,",
				"          INDUSTRY,",
				"          CATEGORY = Category,",
				"          ARCHIVEDDATE,",
				"          DELETEDDATE,",
				"          AGENCYNAME,",
				"          AgencyID,",
				"          LOCATION,",
				"          LocationID,",
				"          RATE = RateDim@RATE,",
				"          RateID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          JNCOUNTER as integer,",
				"          AGENCYNAME as string,",
				"          AGENCYNUMBER as integer,",
				"          JOBREFERENCE as string,",
				"          JOBTYPE as string,",
				"          POSITIONS as string,",
				"          LOCATION as string,",
				"          STARTDATE as string,",
				"          DURATION as string,",
				"          RATE as string,",
				"          CONTACT as string,",
				"          DATEINPUT as string,",
				"          AgencyID as string,",
				"          LocationID as string,",
				"          RateID as string,",
				"          ORIGINALDATE as string,",
				"          INDUSTRY as string,",
				"          CATEGORY as string,",
				"          ARCHIVEDATE as string,",
				"          DELETEDDATE as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}