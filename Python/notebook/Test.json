{
	"name": "Test",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "testsparkpoolno",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "63becabc-2172-425e-a528-06e00887ca41"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/3db7cb1a-673f-4634-8591-83a43b03a0c3/resourceGroups/rg-dia-sbx01-aue-dps-dwh/providers/Microsoft.Synapse/workspaces/wssbx01auedps/bigDataPools/testsparkpoolno",
				"name": "testsparkpoolno",
				"type": "Spark",
				"endpoint": "https://wssbx01auedps.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testsparkpoolno",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import spotipy\r\n",
					"from spotipy.oauth2 import SpotifyClientCredentials\r\n",
					"import pandas as pd\r\n",
					"import time "
				],
				"attachments": null,
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"client_id = 'c1b20389c43248499031e87e858e5ff7'\r\n",
					"client_secret = '6b67d8d89b844ead8100ae1bbcbc2702'\r\n",
					"\r\n",
					"client_credentials_manager = SpotifyClientCredentials(client_id, client_secret)\r\n",
					"sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)"
				],
				"attachments": null,
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def getTrackIDs(user, playlist_id):\r\n",
					"    ids = []\r\n",
					"    playlist = sp.user_playlist(user, playlist_id)\r\n",
					"    for item in playlist['tracks']['items']:\r\n",
					"        track = item['track']\r\n",
					"        ids.append(track['id'])\r\n",
					"    return ids\r\n",
					"\r\n",
					"ids = getTrackIDs('playlist', '48blO7inTLVC7o1fqUCBMB')"
				],
				"attachments": null,
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(len(ids))\r\n",
					"print(ids)"
				],
				"attachments": null,
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def getTrackFeatures(id):\r\n",
					"  meta = sp.track(id)\r\n",
					"  features = sp.audio_features(id)\r\n",
					"\r\n",
					"  # meta\r\n",
					"  name = meta['name']\r\n",
					"  album = meta['album']['name']\r\n",
					"  artist = meta['album']['artists'][0]['name']\r\n",
					"  release_date = meta['album']['release_date']\r\n",
					"  length = meta['duration_ms']\r\n",
					"  popularity = meta['popularity']\r\n",
					"\r\n",
					"\r\n",
					"  # features\r\n",
					"  acousticness = features[0]['acousticness']\r\n",
					"  danceability = features[0]['danceability']\r\n",
					"  energy = features[0]['energy']\r\n",
					"  instrumentalness = features[0]['instrumentalness']\r\n",
					"  liveness = features[0]['liveness']\r\n",
					"  loudness = features[0]['loudness']\r\n",
					"  speechiness = features[0]['speechiness']\r\n",
					"  tempo = features[0]['tempo']\r\n",
					"  time_signature = features[0]['time_signature']\r\n",
					" \r\n",
					"\r\n",
					"  track = [name, album, artist, release_date, length, popularity, danceability, acousticness, danceability, energy, instrumentalness, liveness, loudness, speechiness, tempo, time_signature]\r\n",
					"  return track"
				],
				"attachments": null,
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# loop over track ids \r\n",
					"tracks = []\r\n",
					"for i in range(len(ids)):\r\n",
					"  time.sleep(.5)\r\n",
					"  track = getTrackFeatures(ids[i])\r\n",
					"  tracks.append(track)\r\n",
					"\r\n",
					"# create dataset\r\n",
					"df = pd.DataFrame(tracks, columns = ['name', 'album', 'artist', 'release_date', 'length', 'popularity', 'danceability', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'liveness', 'loudness', 'speechiness', 'tempo', 'time_signature'])\r\n",
					""
				],
				"attachments": null,
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df"
				],
				"attachments": null,
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"import spotipy\r\n",
					"from spotipy.oauth2 import SpotifyClientCredentials\r\n",
					"client_credentials_manager = SpotifyClientCredentials(client_id= 'c1b20389c43248499031e87e858e5ff7', client_secret= '6b67d8d89b844ead8100ae1bbcbc2702')\r\n",
					"sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)"
				],
				"attachments": null,
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"artist_name = []\r\n",
					"track_name = []\r\n",
					"track_popularity = []\r\n",
					"artist_id = []\r\n",
					"track_id = []\r\n",
					"for i in range(0,1000,50):\r\n",
					"    track_results = sp.search(q='year:2022', type='track', limit=50,offset=i)\r\n",
					"    for i, t in enumerate(track_results['tracks']['items']):\r\n",
					"        artist_name.append(t['artists'][0]['name'])\r\n",
					"        artist_id.append(t['artists'][0]['id'])\r\n",
					"        track_name.append(t['name'])\r\n",
					"        track_id.append(t['id'])\r\n",
					"        track_popularity.append(t['popularity'])"
				],
				"attachments": null,
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\r\n",
					"track_df = pd.DataFrame({'artist_name' : artist_name, 'track_name' : track_name, 'track_id' : track_id, 'track_popularity' : track_popularity, 'artist_id' : artist_id})\r\n",
					"print(track_df.shape)\r\n",
					"track_df.head()"
				],
				"attachments": null,
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"artist_popularity = []\r\n",
					"artist_genres = []\r\n",
					"artist_followers = []\r\n",
					"for a_id in track_df.artist_id:\r\n",
					"  artist = sp.artist(a_id)\r\n",
					"  artist_popularity.append(artist['popularity'])\r\n",
					"  artist_genres.append(artist['genres'])\r\n",
					"  artist_followers.append(artist['followers']['total'])"
				],
				"attachments": null,
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"track_df = track_df.assign(artist_popularity=artist_popularity, artist_genres=artist_genres, artist_followers=artist_followers)\r\n",
					"track_df.head()"
				],
				"attachments": null,
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"track_features = []\r\n",
					"for t_id in track_df['track_id']:\r\n",
					"  af = sp.audio_features(t_id)\r\n",
					"  track_features.append(af)\r\n",
					"tf_df = pd.DataFrame(columns = ['danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo', 'type', 'id', 'uri', 'track_href', 'analysis_url', 'duration_ms', 'time_signature'])\r\n",
					"for item in track_features:\r\n",
					"  for feat in item:\r\n",
					"    tf_df = tf_df.append(feat, ignore_index=True)\r\n",
					"tf_df.head()"
				],
				"attachments": null,
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(track_df.shape)"
				],
				"attachments": null,
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"attachments": null,
				"execution_count": null
			}
		]
	}
}